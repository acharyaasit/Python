# -*- coding: utf-8 -*-
"""
Created on Sun May 26 10:06:31 2019

@author: AcharyaA
"""


######### Reset the data 
import cx_Oracle
import os
connectString = os.getenv('db_connect')
con = cx_Oracle.connect(connectString)
cur = con.cursor()
 
# Delete rows
statement = 'delete from cx_pets'
cur.execute(statement)
 
# Reset Identity Coulmn
statement = 'alter table cx_pets modify id generated BY DEFAULT as identity (START WITH 8)'
cur.execute(statement)
 
# Delete rows
statement = 'delete from cx_people'
cur.execute(statement)
 
# Reset Identity Coulmn
statement = 'alter table cx_people modify id generated BY DEFAULT as identity (START WITH 8)'
cur.execute(statement)
 
# Insert default rows
rows = [(1, 'Bob', 35, 'I like dogs'),
        (2, 'Kim', 27, 'I like birds'),
        (3, 'Cheryl', 23, 'I like horses'),
        (4, 'Bob', 27, 'I like rabbits'),
        (5, 'Stacey', 45, 'I like snakes'),
        (6, 'Pete', 23, 'I like cats'),
        (7, 'Pat', 36, 'I like dogs')]
cur.bindarraysize = 2
cur.setinputsizes(int, 20, int, 100)
cur.executemany("insert into cx_people(id, name, age, notes) values (:1, :2, :3, :4)", rows)
con.commit()
 
# Insert default rows
rows = [(1, 'Duke', 1, 'dog'),
        (2, 'Dragon', 2, 'bird'),
        (3, 'Sneaky', 5, 'snake'),
        (4, 'Red', 2, 'bird'),
        (5, 'Red', 3, 'horse'),
        (6, 'Buster', 1, 'dog'),
        (7, 'Fido', 7, 'cat')]
cur.bindarraysize = 2
cur.setinputsizes(int, 20, int, 100)
cur.executemany("insert into cx_pets (id, name, owner, type) values (:1, :2, :3, :4)", rows)
con.commit()
 
cur.close()

######### With Helper function 
import cx_Oracle
import os
connectString = os.getenv('db_connect')
con = cx_Oracle.connect(connectString)
 
def get_all_rows(label, data_type='people'):
 # Query all rows
 cur = con.cursor()
 if (data_type == 'pets'):
    statement = 'select id, name, owner, type from cx_pets order by owner, id'
 else:
    statement = 'select id, name, age, notes from cx_people order by id'
 cur.execute(statement)
 res = cur.fetchall()
 print(label + ': ')
 print (res)
 print(' ')
 cur.close()
 
get_all_rows('Original Data', 'pets')
 
# Your code here
 
get_all_rows('New Data', 'pets')



######### Simple delete
import cx_Oracle
import os
connectString = os.getenv('db_connect')
con = cx_Oracle.connect(connectString)
 
def get_all_rows(label, data_type='people'):
 # Query all rows
 cur = con.cursor()
 if (data_type == 'pets'):
    statement = 'select id, name, owner, type from cx_pets order by id'
 else:
    statement = 'select id, name, age, notes from cx_people order by id'
 cur.execute(statement)
 res = cur.fetchall()
 print(label + ': ')
 print (res)
 print(' ')
 cur.close()
 
get_all_rows('Original Data', 'pets')

### Custome Code 
#cur = con.cursor()
statement = 'delete from cx_pets where id = :id'
cur.execute(statement, {'id':1})
con.commit()

## delete all bird
cur = con.cursor()
statement = 'delete from cx_pets where type = :type'
cur.execute(statement, {'type':'bird'})
con.commit()

get_all_rows('New Data', 'pets')



######### Modificton 
import cx_Oracle
import os
connectString = os.getenv('db_connect')
con = cx_Oracle.connect(connectString)
 
def get_all_rows(label, data_type='people'):
 # Query all rows
 cur = con.cursor()
 if (data_type == 'pets'):
    statement = 'select id, name, owner, type from cx_pets order by id'
 else:
    statement = 'select id, name, age, notes from cx_people order by id'
 cur.execute(statement)
 res = cur.fetchall()
 print(label + ': ')
 print (res)
 print(' ')
 cur.close()
 
get_all_rows('Original People Data', 'people')
get_all_rows('Original Pet Data', 'pets')

### Custome Code 

## generate the scenario for intigrity constraint
#cur = con.cursor()
#statement = 'delete from cx_people where id = :id'
#cur.execute(statement, {'id':1})
#con.commit()

## update to get rid of constraint 
#cur = con.cursor()
# 
#statement = 'update cx_pets set owner = :1 where owner = :2'
#cur.execute(statement, (2, 1))
# 
#statement = 'delete from cx_people where id = :id'
#cur.execute(statement, {'id':1})
#con.commit()

cur = con.cursor()
 
statement = 'delete from cx_pets where owner = :owner'
cur.execute(statement, {'owner':5})
 
statement = 'delete from cx_people where id = :id'
cur.execute(statement, {'id':5})
con.commit()

get_all_rows('New People Data', 'people')
get_all_rows('New Pet Data', 'pets')